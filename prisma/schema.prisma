// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid()
  email    String @unique
  name     String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      Float?   @map("hash")

  patient      Patient[]
  PlanningMeal PlanningMeal[]

  @@map("users")
}

enum GenderType {
  MASC
  FEM

  @@map("gender_types")
}

model Patient {
  id        String      @id @default(uuid()) @db.Uuid()
  userId    String      @map("user_id") @db.Uuid()
  email     String      @unique
  name      String
  birthDate DateTime?
  weight    Float?
  height    Float?
  gender    GenderType?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  planningMeal PlanningMeal[]

  @@map("patients")
}

model CategoryName {
  id          String @id @default(uuid()) @db.Uuid()
  baseProtein Float  @map("base_protein")
  baseCarbo   Float  @map("base_carbo")
  baseFat     Float  @map("base_fat")
  baseEnergy  Float  @map("base_energy")
  name        String @unique

  food Food[]

  @@map("category_name")
}

model Food {
  id         String @id @default(uuid()) @db.Uuid()
  baseUnit   String @map("base_unit")
  baseQty    Float  @map("base_qty")
  name       String @unique
  attributes Json[]

  categoryNameId String @map("category_name_id") @db.Uuid()

  categoryName CategoryName @relation(fields: [categoryNameId], references: [id])

  @@map("foods")
}

model PlanningMeal {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String

  userId    String @map("user_id") @db.Uuid()
  patientId String @map("patient_id") @db.Uuid()

  patient Patient? @relation(fields: [patientId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  meals Meal[]

  @@map("planning_meals")
}

model Meal {
  id   String   @id @default(uuid()) @db.Uuid()
  name String
  time DateTime

  planningMealId String @map("planning_meal_id") @db.Uuid()

  planningMeal PlanningMeal @relation(fields: [planningMealId], references: [id])

  foods MealFood[]

  @@map("meals")
}

model MealFood {
  id      String @id @default(uuid()) @db.Uuid()
  portion Float

  mealId         String @map("meal_id") @db.Uuid()
  categoryNameId String @map("category_name_id") @db.Uuid()

  meal Meal @relation(fields: [mealId], references: [id])

  options String[]

  @@map("meal_foods")
}
