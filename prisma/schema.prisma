// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid()
  email    String @unique
  name     String
  password String
  phone    String @default("null")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      Float?   @map("hash")

  patient              Patient[]
  planningMeal         PlanningMeal[]
  anamnesisTemplate    AnamnesisTemplate[]
  anamnesis            Anamnesis[]
  favoriteMeal         FavoriteMeal[]
  observationTemplate  ObservationTemplate[]
  favoritePlanningMeal FavoritePlanningMeal[]

  @@map("users")
}

enum GenderType {
  MASC
  FEM

  @@map("gender_types")
}

model Anamnesis {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  patientId String   @map("patient_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  text  String
  title String

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("anamnesis")
}

model AnamnesisTemplate {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  text  String
  title String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("anamnesis_templates")
}

model ObservationTemplate {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @map("user_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  text  String
  title String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("observation_templates")
}

model Patient {
  id        String      @id @default(uuid()) @db.Uuid()
  userId    String      @map("user_id") @db.Uuid()
  email     String      @unique
  name      String
  phone     String      @default("null")
  birthDate DateTime?
  weight    Float?
  height    Float?
  gender    GenderType?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  planningMeal PlanningMeal[]
  anamnesis    Anamnesis[]

  @@map("patients")
}

model Food {
  id         String @id @default(uuid()) @db.Uuid()
  baseUnit   String @map("base_unit")
  baseQty    Float  @map("base_qty")
  name       String @unique
  attributes Json[]
  measures   Json[] @default([])

  categoryName String

  mealFood MealFood[]

  @@map("foods")
}

model PlanningMeal {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String

  userId    String @map("user_id") @db.Uuid()
  patientId String @map("patient_id") @db.Uuid()

  patient Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  meals Meal[]

  @@map("planning_meals")
}

model Meal {
  id   String   @id @default(uuid()) @db.Uuid()
  name String
  time DateTime

  planningMealId String @map("planning_meal_id") @db.Uuid()

  planningMeal PlanningMeal @relation(fields: [planningMealId], references: [id], onDelete: Cascade)

  mealFoods              MealFood[]
  favoritePlanningMeal   FavoritePlanningMeal? @relation(fields: [favoritePlanningMealId], references: [id])
  favoritePlanningMealId String?               @db.Uuid()

  @@map("meals")
}

model MealFood {
  id      String @id @default(uuid()) @db.Uuid()
  name    String @default("null")
  measure Json
  qty     Float

  foodId         String  @map("food_id") @db.Uuid()
  mealId         String? @map("meal_id") @db.Uuid()
  favoriteMealId String? @map("favorite_meal_id") @db.Uuid()

  food         Food          @relation(fields: [foodId], references: [id])
  meal         Meal?         @relation(fields: [mealId], references: [id], onDelete: Cascade)
  favoriteMeal FavoriteMeal? @relation(fields: [favoriteMealId], references: [id])

  @@map("meal_foods")
}

model FavoriteMeal {
  id     String @id @default(uuid()) @db.Uuid()
  name   String
  userId String @map("user_id") @db.Uuid()

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  mealFoods MealFood[]

  @@map("favorite_meal")
}

model FavoritePlanningMeal {
  id        String   @id @default(uuid()) @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at")
  name      String

  userId String @map("user_id") @db.Uuid()

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals Meal[]

  @@map("favorite_planning_meal")
}
